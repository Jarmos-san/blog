# GitHub Actions workflow file which activates on Pull Requests to the master branch
name: Build & Deploy

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  buildDeploy:
  # Build job which:
  # 1. Installs Python.
  # 2. Installs & setup Poetry in the runner.
  # 3. Load cached virtual environment, if it exists.
  # 4. Poetry installs the dependecies if cache doesn't exist in previous step.
  # 5. Invoke Pelican to generate the static content.
  # 6. Invoke Netlify CLI "deploy" command to deploy the site live.

    # ! It might actually be better to run it on Windows, since I'm developing on Windows as well.
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: Setup Python 3.8
      # * Install Python 3.8 specifically on the runner
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install poetry
      # * Setup Poetry configured to install virtualenvs inside the project.
      # ! Default behaviour isn't to create virtualenvs in-project it throws some unweildy error otherwise.
<<<<<<< HEAD
      uses: snok/install-poetry@v1.0.0
=======
      uses: snok/install-poetry@v1.1.1
>>>>>>> master
      with:
        virtualenvs-create: false

    # Poetry doesn't play well with Pelican & Netlify CLI for some reason.
    # My guess - the runner is deployed on a Dockerfile which is known not to work well with venvs.
    # So dependency caching will have to wait for awhile, it's only a temporary fix & it should be back
    # in the long-run
    # - name: Load cached venv
    #   # * More information on caching Poetry dependencies are available at:
    #   # ! https://stackoverflow.com/questions/62977821/how-to-cache-poetry-install-for-github-actions
    #   id: cached-poetry-dependencies
    #   uses: actions/cache@v2
    #   with:
    #     path: .venv
    #     key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Pelican
      run: poetry install
      # ! Uncomment line 55 if Poetry can be cached successfully
      # if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    - name: Generate Static Contents
      # * Invoke Pelican to generate the static contents to build the site in the next site
      run: pelican content -s pelicanconf.py

    - name: Deploy to Netlify
      # * Invokes the Netlify CLI "deploy" command to deploy the static content generated
      # * in the previous step to the Netlify servers.
      uses: netlify/actions/cli@master
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      with:
        args: deploy --dir=output --prod
